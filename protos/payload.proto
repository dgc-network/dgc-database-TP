// Copyright (c) The dgc.network
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

import "property.proto";
import "proposal.proto";


message PayloadDGC {
  enum Action {
    CREATE_PARTICIPANT = 0;
    CREATE_RECORD = 1;
    FINALIZE_RECORD = 2;
    CREATE_TABLE = 3;
    UPDATE_PROPERTIES = 4;
    CREATE_PROPOSAL = 5;
    ANSWER_PROPOSAL = 6;
    REVOKE_REPORTER = 7;
  }

  Action action = 1;

  // Approximately when transaction was submitted, as a Unix UTC
  // timestamp
  uint64 timestamp = 2;

  // The transaction handler will read from just one of these fields
  // according to the Action.
  CreateParticipantAction create_participant = 3;
  CreateRecordAction create_record = 4;
  FinalizeRecordAction finalize_record = 5;
  CreateTableAction create_table = 6;
  UpdatePropertiesAction update_properties = 7;
  CreateProposalAction create_proposal = 8;
  AnswerProposalAction answer_proposal = 9;
  RevokeReporterAction revoke_reporter = 10;
}


message CreateParticipantAction {
  // The human-readable name of the Participant. This does not need to be
  // unique.
  string name = 1;
}


message CreateRecordAction {
  // The natural key of the Record
  string record_id = 1;

  // The name of the Table this Record belongs to
  string table = 2;

  repeated PropertyValue properties = 3;
}


message FinalizeRecordAction {
  // The natural key of the Record
  string record_id = 1;
}


message CreateTableAction {
  string name = 1;

  repeated PropertySchema properties = 2;
}


message UpdatePropertiesAction {
  // The natural key of the Record
  string record_id = 1;

  repeated PropertyValue properties = 2;
}


message CreateProposalAction {
  string proposal_id = 1;

  Proposal.Role role = 2;
  
  // The time at which the Proposal was created
  uint64 timestamp = 4;

  // the public key of the Participant to whom the Proposal is sent
  // (must be different from the Participant creating the Proposal)
  string receiving_participant = 5;

  // The natural key of the Record
  string record_id = 6;

  repeated string properties = 7;

  // dgc_amount transfer/exchange
  double dg_coin_amount = 8;
  string currency_iso_codes = 9;
  double currency_quote_amount = 10;

}


message AnswerProposalAction {
  enum Response {
    ACCEPT = 0;
    REJECT = 1;
    CANCEL = 2;
    autoCLOSE = 3;
    autoOPEN = 4;
  }

  string proposal_id = 1;

  // The role being proposed (owner, custodian, or reporter)
  Proposal.Role role = 2;

  // The respose to the Proposal (accept, reject, or cancel)
  Response response = 3;

  // The time at which the Proposal was created
  uint64 timestamp = 4;

  //Proposal.Status status = 5;
  // The public key of the Participant to whom the proposal is sent
  string receiving_participant = 6;

  // The natural key of the Record
  string record_id = 7;

  // dgc_amount
  double dg_coin_amount = 8;

  double dg_coin_exchanged = 9;
  repeated Exchange exchanges = 10;

  
}


message RevokeReporterAction {
  // The natural key of the Record
  string record_id = 1;

  // The reporter's public key
  string reporter_id = 2;

  // The names of the Properties for which the reporter's
  // authorization is revoked
  repeated string properties = 3;
}
